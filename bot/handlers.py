from aiogram import Router, F, Bot
from utils.helpers import safe_edit_text
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards import Keyboards
from database.crud import *
from database import crud
from database.models import SessionLocal, Channel, RSSSource, Post
from core.publisher import Publisher
from core.ai_processor import AIProcessor
from config.settings import ADMIN_IDS
from datetime import datetime, timedelta
import random

router = Router()
keyboards = Keyboards()


class ChannelStates(StatesGroup):
    waiting_channel_id = State()
    waiting_channel_topic = State()
    waiting_rss_url = State()
    waiting_rss_search = State()
    waiting_post_content = State()
    waiting_ai_prompt = State()
    editing_post = State()
    waiting_manual_rss = State()


@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    await state.clear()
    db = SessionLocal()
    user = get_or_create_user(db, message.from_user.id, message.from_user.username)

    if message.from_user.id in ADMIN_IDS and not user.is_admin:
        user.is_admin = True
        db.commit()

    db.close()

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Channel Manager Bot!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ–¥–µ–Ω–∏–µ –≤–∞—à–∏—Ö —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–æ–≤.",
        reply_markup=keyboards.main_admin_menu()
    )


@router.callback_query(F.data == "back_main")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await safe_edit_text(callback.message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboards.main_admin_menu())


@router.message(Command("my_channels"))
@router.callback_query(F.data == "my_channels")
async def show_channels(event: Message | CallbackQuery):
    db = SessionLocal()
    user = get_or_create_user(db, event.from_user.id, event.from_user.username)
    channels = get_user_channels(db, user.id)
    db.close()

    text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π?" if not channels else "üìä –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:"

    keyboard = []
    if channels:
        for channel in channels:
            status = "üü¢" if channel.is_active else "üî¥"
            keyboard.append([InlineKeyboardButton(
                text=f"{status} {channel.channel_name}",
                callback_data=f"channel_{channel.id}"
            )])

    keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")])
    if isinstance(event, CallbackQuery):
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")])

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    if isinstance(event, Message):
        await event.answer(text, reply_markup=reply_markup)
    else:
        await safe_edit_text(event.message, text, reply_markup=reply_markup)


@router.message(Command("add_channel"))
@router.callback_query(F.data == "add_channel")
async def add_channel_start(event: Message | CallbackQuery, state: FSMContext):
    text = (
        "<b>–®–∞–≥ 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–≤–æ–º –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤.\n"
        "2. –ü—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ <code>@username</code>, —Å—Å—ã–ª–∫—É <code>https://t.me/channel</code> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–≥–æ."
    )
    if isinstance(event, Message):
        await event.answer(text)
    else:
        await safe_edit_text(event.message, text)
    await state.set_state(ChannelStates.waiting_channel_id)


@router.message(StateFilter(ChannelStates.waiting_channel_id))
async def process_channel_id(message: Message, state: FSMContext, bot: Bot):
    channel_id = None
    channel_name = None
    channel_input = None

    if message.forward_from_chat:
        channel_id = str(message.forward_from_chat.id)
        channel_name = message.forward_from_chat.title
    elif message.text:
        if message.text.startswith("@"):
            channel_input = message.text
        elif message.text.startswith("https://t.me/"):
            channel_input = f"@{message.text.split('/')[-1]}"

        if channel_input:
            try:
                chat = await bot.get_chat(channel_input)
                channel_id = str(chat.id)
                channel_name = chat.title
            except Exception:
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–µ–≥–æ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
        else:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ @username / —Å—Å—ã–ª–∫—É.")
            return
    else:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ @username / —Å—Å—ã–ª–∫—É.")
        return

    if channel_id:
        db = SessionLocal()
        existing_channel = db.query(Channel).filter(Channel.channel_id == channel_id).first()
        db.close()
        if existing_channel:
            await message.answer(
                f"–ö–∞–Ω–∞–ª '{channel_name}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É. –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º —á–µ—Ä–µ–∑ –º–µ–Ω—é /my_channels.")
            await state.clear()
            return

        await state.update_data(channel_id=channel_id, channel_name=channel_name)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ù–æ–≤–æ—Å—Ç–∏ IT', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥'):")
        await state.set_state(ChannelStates.waiting_channel_topic)


@router.message(StateFilter(ChannelStates.waiting_channel_topic))
async def process_channel_topic(message: Message, state: FSMContext):
    data = await state.get_data()
    db = SessionLocal()
    user = get_or_create_user(db, message.from_user.id, message.from_user.username)

    channel = create_channel(
        db, user.id, data['channel_id'],
        data['channel_name'], message.text
    )
    db.close()

    await state.clear()

    await message.answer(
        f"‚úÖ –ö–∞–Ω–∞–ª '{data['channel_name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π (RSS-–ª–µ–Ω—Ç—ã).",
        reply_markup=keyboards.channel_menu(channel.id)
    )


@router.callback_query(F.data.startswith("channel_"))
async def channel_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    channel_id = int(callback.data.split("_")[1])

    db = SessionLocal()
    channel = db.query(Channel).filter(Channel.id == channel_id).first()
    db.close()

    if not channel:
        await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    status = "–∞–∫—Ç–∏–≤–µ–Ω üü¢" if channel.is_active else "–Ω–∞ –ø–∞—É–∑–µ üî¥"
    mode = "—Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π" if channel.moderation_mode else "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"

    text = (
        f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º: {channel.channel_name}</b>\n\n"
        f"<b>–¢–µ–º–∞:</b> {channel.topic}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
        f"<b>–†–µ–∂–∏–º AI:</b> {mode} (–º–æ–¥–µ–ª—å: <code>{channel.ai_model}</code>)\n"
        f"<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—Å—Ç–æ–≤:</b> ~{channel.post_interval // 60} –º–∏–Ω."
    )

    await callback.message.edit_text(
        text,
        reply_markup=keyboards.channel_menu(channel_id)
    )


@router.callback_query(F.data.startswith("rss_"))
async def rss_sources_menu(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[1])
    db = SessionLocal()
    sources = db.query(RSSSource).filter(RSSSource.channel_id == channel_id).all()
    db.close()

    text = "üì∞ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤." if not sources else "üì∞ –í–∞—à–∏ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∏:"
    await callback.message.edit_text(
        text,
        reply_markup=keyboards.rss_sources_menu(channel_id, sources)
    )


@router.callback_query(F.data.startswith("add_rss_"))
async def add_rss_manual_start(callback: CallbackQuery, state: FSMContext):
    channel_id = int(callback.data.split("_")[2])
    await state.update_data(channel_id=channel_id)
    await callback.message.edit_text(
        "üì° –í–≤–µ–¥–∏—Ç–µ URL RSS-–ª–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö RSS:\n"
        "‚Ä¢ <code>https://habr.com/ru/rss/all/all/</code> - –•–∞–±—Ä\n"
        "‚Ä¢ <code>https://vc.ru/rss</code> - VC.ru\n"
        "‚Ä¢ <code>https://www.vedomosti.ru/rss/news</code> - –í–µ–¥–æ–º–æ—Å—Ç–∏\n"
        "‚Ä¢ <code>https://lenta.ru/rss</code> - –õ–µ–Ω—Ç–∞.—Ä—É"
    )
    await state.set_state(ChannelStates.waiting_manual_rss)


@router.message(StateFilter(ChannelStates.waiting_manual_rss))
async def process_manual_rss(message: Message, state: FSMContext):
    data = await state.get_data()
    channel_id = data['channel_id']

    url_input = message.text.strip()
    if not url_input.startswith(('http://', 'https://')):
        formatted_url = f"https://{url_input}"
    else:
        formatted_url = url_input

    import feedparser
    feed = feedparser.parse(formatted_url)

    if feed.entries:
        db = SessionLocal()
        title = feed.feed.get('title', formatted_url[:50])
        add_rss_source(db, channel_id, formatted_url, title)
        sources = db.query(RSSSource).filter_by(channel_id=channel_id).all()
        db.close()

        await message.answer(
            f"‚úÖ RSS –∏—Å—Ç–æ—á–Ω–∏–∫ '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=keyboards.rss_sources_menu(channel_id, sources)
        )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å RSS –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏."
        )

    await state.clear()


@router.callback_query(F.data.startswith("create_"))
async def create_post_start(callback: CallbackQuery, bot: Bot):
    channel_id = int(callback.data.split("_")[1])

    db = SessionLocal()
    channel = db.query(Channel).filter_by(id=channel_id).first()
    sources = db.query(RSSSource).filter_by(channel_id=channel_id, is_active=True).all()

    if not channel:
        await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        db.close()
        return

    if not sources:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏!", show_alert=True)
        db.close()
        return

    msg = await safe_edit_text(callback.message, "‚è≥ –ò—â—É —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")

    try:
        from core.rss_parser import RSSParser
        ai_processor = AIProcessor()
        publisher = Publisher(bot)

        parser = RSSParser()
        async with parser:
            all_entries = []
            for source in sources:
                entries = await parser.parse_feed(source.url)
                if entries:
                    all_entries.extend(entries[:3])

            if not all_entries:
                await safe_edit_text(msg, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö.")
                db.close()
                return

            await safe_edit_text(msg, "üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é AI...")
            
            # –ò—â–µ–º –Ω–æ–≤–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –µ—â–µ –Ω–µ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞
            selected_entry = None
            for entry in all_entries:
                if not check_post_duplicate(db, channel_id, entry['title'], entry['content'], entry.get('guid')):
                    selected_entry = entry
                    break
            
            if not selected_entry:
                await safe_edit_text(msg, "‚ùå –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–∂–µ –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã.")
                db.close()
                return
            
            entry = selected_entry

            processed_content = await ai_processor.process_content(
                entry,
                {
                    'ai_model': channel.ai_model,
                    'ai_prompt': channel.ai_prompt,
                    'topic': channel.topic
                }
            )

            media_urls = entry.get('media', [])

            await safe_edit_text(msg, "‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª...")
            # –í–º–µ—Å—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ‚Äî –∫–ª–∞–¥–µ–º –ø–æ—Å—Ç –í –û–ß–ï–†–ï–î–¨ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
            last_post = db.query(Post).filter_by(channel_id=channel_id).order_by(Post.scheduled_time.desc()).first()
            if last_post and last_post.scheduled_time and last_post.scheduled_time > datetime.utcnow():
                next_time = last_post.scheduled_time + timedelta(seconds=channel.post_interval)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –∏–ª–∏ –æ–Ω–∏ –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî —Å—Ç–∞–≤–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
                next_time = datetime.utcnow() + timedelta(minutes=5)

            new_post = create_post(
                db, channel_id, sources[0].url,
                entry['title'], entry['content'],
                processed_content, media_urls,
                next_time, entry.get('guid')
            )

            await safe_edit_text(
                msg,
                "‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é",
                reply_markup=keyboards.channel_menu(channel_id)
            )

    except Exception as e:
        await safe_edit_text(msg, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:100]}")
    finally:
        db.close()


@router.callback_query(F.data.startswith("queue_"))
async def show_queue(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[1])
    db = SessionLocal()
    posts = get_channel_queue(db, channel_id)
    db.close()

    if not posts:
        await safe_edit_text(callback.message,
            "üì≠ –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤ –ø—É—Å—Ç–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"channel_{channel_id}")]
            ])
        )
    else:
        await safe_edit_text(callback.message,
            f"üìù –í –æ—á–µ—Ä–µ–¥–∏ {len(posts)} –ø–æ—Å—Ç–æ–≤",
            reply_markup=keyboards.post_queue_menu(channel_id, posts)
        )


@router.callback_query(F.data.startswith("post_"))
async def show_post_preview(callback: CallbackQuery, bot: Bot):
    post_id = int(callback.data.split("_")[1])
    db = SessionLocal()
    post = db.query(Post).filter_by(id=post_id).first()
    db.close()
    
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
    status_emoji = {
        "pending": "‚è≥",
        "published": "‚úÖ",
        "moderation": "üëÅÔ∏è",
        "rejected": "‚ùå"
    }.get(post.status, "‚ùì")
    
    preview_text = (
        f"<b>üìù –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞</b>\n\n"
        f"<b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:</b> {post.original_title[:80]}\n"
        f"<b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {post.scheduled_time.strftime('%d.%m.%Y %H:%M')}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {post.status}\n"
        f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {post.source_url[:50]}...\n\n"
        f"<b>üìÑ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:</b>\n"
        f"{'‚îÄ' * 30}\n"
        f"{post.processed_content}\n"
        f"{'‚îÄ' * 30}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ—Å—Ç–æ–º
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—Ç–∞
    if post.status == "pending":
        keyboard.append([
            InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"publish_post_{post_id}"),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_post_{post_id}")
        ])
    elif post.status == "moderation":
        keyboard.append([
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_post_{post_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_post_{post_id}")
        ])
    
    # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard.append([
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_post_{post_id}"),
        InlineKeyboardButton(text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"copy_post_{post_id}")
    ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—á–µ—Ä–µ–¥–∏", callback_data=f"queue_{post.channel_id}")
    ])
    
    await callback.message.edit_text(
        preview_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data.startswith("publish_now_"))
async def publish_next_post(callback: CallbackQuery, bot: Bot):
    channel_id = int(callback.data.split("_")[2])
    db = SessionLocal()
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
    post = db.query(Post).filter(
        Post.channel_id == channel_id,
        Post.status == "pending"
    ).order_by(Post.scheduled_time).first()
    
    if not post:
        await callback.answer("–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)
        db.close()
        return
    
    # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
    try:
        from core.publisher import Publisher
        publisher = Publisher(bot)
        
        channel = db.query(Channel).filter_by(id=channel_id).first()
        message_id = await publisher.publish_post(
            channel.channel_id,
            post.processed_content,
            post.media_urls
        )
        
        if message_id:
            update_post_status(db, post.id, "published", message_id)
            await callback.answer(f"–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ {channel.channel_name}!", show_alert=True)
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞", show_alert=True)
            
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)[:100]}", show_alert=True)
    finally:
        db.close()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏
    callback.data = f"queue_{channel_id}"
    await show_queue(callback)


@router.callback_query(F.data.startswith("clear_queue_"))
async def clear_queue_confirm(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[2])
    db = SessionLocal()
    posts_count = db.query(Post).filter(
        Post.channel_id == channel_id,
        Post.status == "pending"
    ).count()
    db.close()
    
    if posts_count == 0:
        await callback.answer("–û—á–µ—Ä–µ–¥—å —É–∂–µ –ø—É—Å—Ç–∞", show_alert=True)
        return
    
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data=f"confirm_clear_queue_{channel_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"queue_{channel_id}")
        ]
    ]
    
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ {posts_count} –ø–æ—Å—Ç–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data.startswith("confirm_clear_queue_"))
async def clear_queue_execute(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[3])
    db = SessionLocal()
    
    deleted_count = db.query(Post).filter(
        Post.channel_id == channel_id,
        Post.status == "pending"
    ).delete()
    
    db.commit()
    db.close()
    
    await callback.answer(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –ø–æ—Å—Ç–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏
    callback.data = f"queue_{channel_id}"
    await show_queue(callback)


@router.callback_query(F.data.startswith("publish_post_"))
async def publish_specific_post(callback: CallbackQuery, bot: Bot):
    post_id = int(callback.data.split("_")[2])
    db = SessionLocal()
    post = db.query(Post).filter_by(id=post_id).first()
    
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        db.close()
        return
    
    try:
        from core.publisher import Publisher
        publisher = Publisher(bot)
        
        channel = db.query(Channel).filter_by(id=post.channel_id).first()
        message_id = await publisher.publish_post(
            channel.channel_id,
            post.processed_content,
            post.media_urls
        )
        
        if message_id:
            update_post_status(db, post.id, "published", message_id)
            await callback.answer(f"–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ {channel.channel_name}!", show_alert=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏
            callback.data = f"queue_{post.channel_id}"
            await show_queue(callback)
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞", show_alert=True)
            
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)[:100]}", show_alert=True)
    finally:
        db.close()


@router.callback_query(F.data.startswith("delete_post_"))
async def delete_specific_post(callback: CallbackQuery):
    post_id = int(callback.data.split("_")[2])
    db = SessionLocal()
    post = db.query(Post).filter_by(id=post_id).first()
    
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        db.close()
        return
    
    channel_id = post.channel_id
    post_title = post.original_title[:50]
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ CRUD
    if delete_post(db, post_id):
        await callback.answer(f"–ü–æ—Å—Ç ¬´{post_title}¬ª —É–¥–∞–ª–µ–Ω", show_alert=True)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞", show_alert=True)
    
    db.close()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏
    callback.data = f"queue_{channel_id}"
    await show_queue(callback)


@router.callback_query(F.data.startswith("edit_post_"))
async def edit_post_start(callback: CallbackQuery, state: FSMContext):
    post_id = int(callback.data.split("_")[2])
    db = SessionLocal()
    post = db.query(Post).filter_by(id=post_id).first()
    db.close()
    
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(post_id=post_id, channel_id=post.channel_id)
    await callback.message.edit_text(
        f"<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n"
        f"{post.processed_content}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:"
    )
    await state.set_state(ChannelStates.editing_post)


@router.message(StateFilter(ChannelStates.editing_post))
async def process_post_edit(message: Message, state: FSMContext):
    data = await state.get_data()
    post_id = data['post_id']
    channel_id = data['channel_id']
    
    db = SessionLocal()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ CRUD –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    post = update_post_content(db, post_id, message.text)
    
    if post:
        await message.answer("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!")
    else:
        await message.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    db.close()
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏
    from aiogram.types.user import User
    from aiogram.types.chat import Chat
    
    callback_to_return = CallbackQuery(
        id="return_to_queue",
        from_user=message.from_user,
        chat_instance="dummy",
        message=message,
        data=f"queue_{channel_id}"
    )
    await show_queue(callback_to_return)


@router.callback_query(F.data.startswith("copy_post_"))
async def copy_post_text(callback: CallbackQuery):
    post_id = int(callback.data.split("_")[2])
    db = SessionLocal()
    post = db.query(Post).filter_by(id=post_id).first()
    db.close()
    
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.answer(
        f"<b>üìã –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        f"<code>{post.processed_content}</code>",
        parse_mode="HTML"
    )
    await callback.answer("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç", show_alert=True)


@router.callback_query(F.data.startswith("approve_post_"))
async def approve_post(callback: CallbackQuery, bot: Bot):
    post_id = int(callback.data.split("_")[2])
    db = SessionLocal()
    post = db.query(Post).filter_by(id=post_id).first()
    
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        db.close()
        return
    
    try:
        from core.publisher import Publisher
        publisher = Publisher(bot)
        
        channel = db.query(Channel).filter_by(id=post.channel_id).first()
        message_id = await publisher.publish_post(
            channel.channel_id,
            post.processed_content,
            post.media_urls
        )
        
        if message_id:
            update_post_status(db, post.id, "published", message_id)
            await callback.answer(f"–ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ {channel.channel_name}!", show_alert=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏
            callback.data = f"queue_{post.channel_id}"
            await show_queue(callback)
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞", show_alert=True)
            
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)[:100]}", show_alert=True)
    finally:
        db.close()


@router.callback_query(F.data.startswith("reject_post_"))
async def reject_post(callback: CallbackQuery):
    post_id = int(callback.data.split("_")[2])
    db = SessionLocal()
    
    if update_post_status(db, post_id, "rejected"):
        await callback.answer("–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏
        post = db.query(Post).filter_by(id=post_id).first()
        if post:
            callback.data = f"queue_{post.channel_id}"
            await show_queue(callback)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞", show_alert=True)
    
    db.close()


@router.callback_query(F.data.startswith("toggle_"))
async def toggle_channel_active(callback: CallbackQuery, state: FSMContext):
    channel_id = int(callback.data.split("_")[1])
    db = SessionLocal()
    channel = crud.toggle_channel_active(db, channel_id)
    db.close()

    if channel:
        status = "–∑–∞–ø—É—â–µ–Ω" if channel.is_active else "–ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É"
        await callback.answer(f"–ö–∞–Ω–∞–ª {status}")
        await channel_menu(callback, state)


@router.callback_query(F.data.startswith("schedule_"))
async def schedule_menu(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[1])
    db = SessionLocal()
    channel = db.query(Channel).filter_by(id=channel_id).first()
    db.close()
    if not channel:
        await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    text = f"‚è∞ –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏: ~{channel.post_interval // 60} –º–∏–Ω—É—Ç.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:"
    await callback.message.edit_text(
        text,
        reply_markup=keyboards.schedule_menu(channel_id, channel.post_interval)
    )


@router.callback_query(F.data.startswith("set_interval_"))
async def set_schedule(callback: CallbackQuery):
    try:
        _, _, channel_id_str, interval_str = callback.data.split("_")
        channel_id = int(channel_id_str)
        interval = int(interval_str)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    db = SessionLocal()
    update_channel_settings(db, channel_id, post_interval=interval)
    db.close()

    await callback.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ~{interval // 60} –º–∏–Ω—É—Ç.", show_alert=True)

    callback.data = f"schedule_{channel_id}"
    await schedule_menu(callback)


@router.callback_query(F.data.startswith("delete_rss_"))
async def delete_rss_confirm(callback: CallbackQuery):
    source_id = int(callback.data.split("_")[2])
    db = SessionLocal()
    source = db.query(RSSSource).filter_by(id=source_id).first()
    if not source:
        await callback.answer("RSS –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        db.close()
        return
    
    channel_id = source.channel_id
    db.close()
    
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å RSS –∏—Å—Ç–æ—á–Ω–∏–∫ ¬´{source.name}¬ª?",
        reply_markup=keyboards.confirm_delete_rss(source_id, channel_id)
    )


@router.callback_query(F.data.startswith("delete_"))
async def delete_channel_confirm(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[1])
    db = SessionLocal()
    channel = db.query(Channel).filter_by(id=channel_id).first()
    db.close()
    if not channel:
        await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª ¬´{channel.channel_name}¬ª –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –¥–∞–Ω–Ω—ã–µ?",
        reply_markup=keyboards.confirm_delete(channel_id)
    )


@router.callback_query(F.data.startswith("confirm_delete_rss_"))
async def delete_rss_execute(callback: CallbackQuery):
    source_id = int(callback.data.split("_")[3])
    db = SessionLocal()
    source = db.query(RSSSource).filter_by(id=source_id).first()
    if source:
        channel_id = source.channel_id
        source_name = source.name
        delete_rss_source(db, source_id)
        sources = db.query(RSSSource).filter_by(channel_id=channel_id).all()
        
        await callback.answer(f"RSS –∏—Å—Ç–æ—á–Ω–∏–∫ ¬´{source_name}¬ª —É–¥–∞–ª–µ–Ω", show_alert=True)
        await callback.message.edit_text(
            "üì∞ –í–∞—à–∏ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∏:" if sources else "üì∞ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.",
            reply_markup=keyboards.rss_sources_menu(channel_id, sources)
        )
    else:
        await callback.answer("RSS –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    db.close()


@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_channel_execute(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[2])
    db = SessionLocal()
    delete_channel(db, channel_id)
    db.close()

    await callback.answer("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", show_alert=True)
    await show_channels(callback)


@router.callback_query(F.data.regexp(r"^ai_\d+$"))
async def ai_settings_menu(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[1])
    db = SessionLocal()
    channel = db.query(Channel).filter_by(id=channel_id).first()
    db.close()

    if not channel:
        await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    text = (
        f"<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI –¥–ª—è –∫–∞–Ω–∞–ª–∞ ¬´{channel.channel_name}¬ª</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:</b> <code>{channel.ai_model}</code>\n"
        f"<b>–†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b> {'–í–∫–ª—é—á–µ–Ω' if channel.moderation_mode else '–í—ã–∫–ª—é—á–µ–Ω'}\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã, –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç."
    )
    await callback.message.edit_text(
        text,
        reply_markup=keyboards.ai_settings_menu(channel_id, channel.moderation_mode)
    )


@router.callback_query(F.data.startswith("ai_model_"))
async def choose_ai_model(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[2])
    db = SessionLocal()
    channel = db.query(Channel).filter_by(id=channel_id).first()
    db.close()

    if not channel:
        await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:",
        reply_markup=keyboards.ai_models_menu(channel_id, channel.ai_model)
    )


@router.callback_query(F.data.startswith("ai_prompt_"))
async def ai_prompt_change_start(callback: CallbackQuery, state: FSMContext):
    channel_id = int(callback.data.split("_")[2])
    db = SessionLocal()
    channel = db.query(Channel).filter_by(id=channel_id).first()
    db.close()

    if not channel:
        await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    current_prompt = channel.ai_prompt or "–ü–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π."

    await state.update_data(channel_id=channel_id)
    await callback.message.edit_text(
        f"<b>–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:</b>\n<pre>{current_prompt}</pre>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `{topic}` –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–º—ã –∫–∞–Ω–∞–ª–∞."
    )
    await state.set_state(ChannelStates.waiting_ai_prompt)


@router.message(StateFilter(ChannelStates.waiting_ai_prompt))
async def process_ai_prompt(message: Message, state: FSMContext):
    data = await state.get_data()
    channel_id = data['channel_id']

    db = SessionLocal()
    update_channel_settings(db, channel_id, ai_prompt=message.text)
    channel = db.query(Channel).filter_by(id=channel_id).first()
    db.close()

    await message.answer("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()

    from aiogram.types.user import User
    from aiogram.types.chat import Chat

    callback_to_return = CallbackQuery(
        id="return_to_ai_menu",
        from_user=message.from_user,
        chat_instance="dummy",
        message=message,
        data=f"ai_{channel_id}"
    )
    await ai_settings_menu(callback_to_return)


@router.callback_query(F.data.startswith("set_model_"))
async def set_ai_model(callback: CallbackQuery):
    parts = callback.data.split("_")
    channel_id = int(parts[2])
    model = "-".join(parts[3:])

    db = SessionLocal()
    update_channel_settings(db, channel_id, ai_model=model)
    db.close()

    await callback.answer(f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {model}", show_alert=True)
    await ai_settings_menu(callback)


@router.callback_query(F.data.startswith("moderation_"))
async def toggle_moderation(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[1])
    db = SessionLocal()
    channel = db.query(Channel).filter_by(id=channel_id).first()
    if channel:
        new_mode = not channel.moderation_mode
        update_channel_settings(db, channel_id, moderation_mode=new_mode)
        mode_text = "–≤–∫–ª—é—á–µ–Ω" if new_mode else "–≤—ã–∫–ª—é—á–µ–Ω"
        await callback.answer(f"–†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏ {mode_text}")
        await ai_settings_menu(callback)
    db.close()
