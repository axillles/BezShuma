import asyncio
import logging
import os
import sys
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand
from config.settings import BOT_TOKEN, DATABASE_URL
from bot.handlers import router
from admin.panel import admin_router
from core.scheduler import Scheduler

# Optional: Postgres advisory lock
from sqlalchemy import text
try:
    from database.models import engine as db_engine
except Exception:  # engine may fail only if env is broken; we handle at runtime
    db_engine = None

# Optional: file lock fallback for non-Postgres
try:
    import fcntl  # type: ignore
except Exception:
    fcntl = None  # on Windows or restricted env, we skip file locking

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger = logging.getLogger(__name__)

_POSTGRES_LOCK_KEY = 210987654321  # 64-bit advisory lock key (constant per app)
_file_lock_handle = None
_pg_lock_connection = None


def _acquire_singleton_lock() -> bool:
    global _file_lock_handle, _pg_lock_connection

    url = (DATABASE_URL or "").lower()

    # Prefer PostgreSQL advisory lock when using Postgres
    if url.startswith("postgresql") and db_engine is not None:
        try:
            conn = db_engine.connect()
            # Try to obtain session-level advisory lock; keep connection open while running
            acquired = conn.execute(text("select pg_try_advisory_lock(:k)"), {"k": _POSTGRES_LOCK_KEY}).scalar()
            if acquired:
                _pg_lock_connection = conn
                logger.info("–ü–æ–ª—É—á–µ–Ω advisory lock –≤ PostgreSQL (singleton –∑–∞–ø—É—â–µ–Ω)")
                return True
            else:
                conn.close()
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å advisory lock –≤ PostgreSQL ‚Äî —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π –∏–Ω—Å—Ç–∞–Ω—Å")
                return False
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å advisory lock –≤ PostgreSQL: {e}. –ü–µ—Ä–µ—Ö–æ–∂—É –∫ —Ñ–∞–π–ª–æ–≤–æ–º—É lock.")
            # fallthrough to file lock

    # File lock fallback (Unix-like only)
    if fcntl is not None:
        try:
            lock_path = "/tmp/newsbot.singleton.lock"
            _file_lock_handle = open(lock_path, "w+")
            fcntl.flock(_file_lock_handle.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
            _file_lock_handle.write(str(os.getpid()))
            _file_lock_handle.flush()
            logger.info("–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª–æ–≤—ã–π lock (singleton –∑–∞–ø—É—â–µ–Ω)")
            return True
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π lock ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ, —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π –∏–Ω—Å—Ç–∞–Ω—Å: {e}")
            # Ensure handle is closed if partially opened
            try:
                if _file_lock_handle:
                    _file_lock_handle.close()
            finally:
                _file_lock_handle = None
            return False

    # If no locking mechanism available, proceed (best-effort) ‚Äî but warn
    logger.warning("–ú–µ—Ö–∞–Ω–∏–∑–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–æ–∑–º–æ–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤.")
    return True


def _release_singleton_lock() -> None:
    global _file_lock_handle, _pg_lock_connection

    # Release Postgres advisory lock if held
    if _pg_lock_connection is not None:
        try:
            _pg_lock_connection.execute(text("select pg_advisory_unlock(:k)"), {"k": _POSTGRES_LOCK_KEY})
        except Exception:
            pass
        try:
            _pg_lock_connection.close()
        except Exception:
            pass
        _pg_lock_connection = None

    # Release file lock if held
    if _file_lock_handle is not None and fcntl is not None:
        try:
            fcntl.flock(_file_lock_handle.fileno(), fcntl.LOCK_UN)
        except Exception:
            pass
        try:
            _file_lock_handle.close()
        except Exception:
            pass
        _file_lock_handle = None


async def set_main_menu(bot: Bot):
    main_menu_commands = [
        BotCommand(command='/start', description='üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        BotCommand(command='/my_channels', description='üìä –ú–æ–∏ –∫–∞–Ω–∞–ª—ã'),
        BotCommand(command='/add_channel', description='‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª'),
        BotCommand(command='/admin', description='üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
    ]
    await bot.set_my_commands(main_menu_commands)


async def main():
    if not BOT_TOKEN:
        logger.critical("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")
        return

    if not _acquire_singleton_lock():
        # Exit immediately to avoid Telegram getUpdates conflict
        logger.error("–ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É: –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å.")
        return

    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher(storage=MemoryStorage())

    dp.include_router(router)
    dp.include_router(admin_router)

    await set_main_menu(bot)

    scheduler = Scheduler(bot)
    scheduler.start()

    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    finally:
        scheduler.stop()
        await bot.session.close()
        _release_singleton_lock()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")