import asyncio
import random
import re
from typing import Dict, List, Optional
from urllib.parse import urlparse

import g4f
from g4f.errors import ModelNotFoundError
from utils.helpers import sanitize_html


def is_http_url(s: str) -> bool:
    try:
        return urlparse(s).scheme in {"http", "https"}
    except Exception:
        return False


def md_to_html(text: str) -> str:
    try:
        import markdown2
    except ImportError:
        return text
    html = markdown2.markdown(text)
    html = html.replace("<strong>", "<b>").replace("</strong>", "</b>").replace("<em>", "<i>").replace("</em>", "</i>")
    html = re.sub(r"</?p>", "", html)
    return html


class AIProcessor:
    _SAFE_MODEL = "gpt-4o-mini"
    _SUPPORTED = {"gpt-4o-mini", "gpt-4"}

    def __init__(self) -> None:
        self.emojis = {
            "tech": ["üíª", "üöÄ", "üîß", "‚ö°", "üåê", "üì±", "ü§ñ"],
            "news": ["üì∞", "üì¢", "üî•", "‚ö†Ô∏è", "üí°", "‚ú®", "üéØ"],
            "business": ["üíº", "üìà", "üí∞", "üè¢", "üìä", "ü§ù", "üí∏"],
        }

    async def process_content(self, entry: Dict, ch_settings: Dict) -> str:
        model = ch_settings.get("ai_model") or self._SAFE_MODEL
        if model not in self._SUPPORTED:
            model = self._SAFE_MODEL
        topic = ch_settings.get("topic", "–Ω–æ–≤–æ—Å—Ç–∏")
        sys_prompt = (ch_settings.get("ai_prompt") or self._default_prompt().format(topic=topic))
        user_prompt = "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–π —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å –≤ –ø–æ—Å—Ç –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º (–¥–æ 900 —Å–∏–º–≤.): Title: {}. Content: {}".format(
            entry['title'], entry['content'][:500])
        try:
            raw = await self._call_llm(model, sys_prompt, user_prompt)
        except ModelNotFoundError:
            raw = await self._call_llm(self._SAFE_MODEL, sys_prompt, user_prompt)
        except Exception as e:
            import logging
            logging.getLogger(__name__).exception("AI error, fallback: %s", e)
            return await self._fallback_format(entry, topic)
        return sanitize_html(self._finalize_post(raw, topic))

    async def simple_translate(self, text: str) -> str:
        try:
            rsp = await g4f.ChatCompletion.create_async(model=self._SAFE_MODEL, messages=[
                {"role": "user", "content": "Translate to Russian:\n\n{}".format(text)}])
            return rsp
        except Exception:
            return text

    async def _call_llm(self, model: str, sys: str, user: str) -> str:
        return await asyncio.wait_for(g4f.ChatCompletion.create_async(model=model,
                                                                      messages=[{"role": "system", "content": sys},
                                                                                {"role": "user", "content": user}]),
                                      timeout=20)

    async def _fallback_format(self, entry: Dict, topic: str) -> str:
        title_ru = await self.simple_translate(entry['title'])
        cont_ru = await self.simple_translate(entry['content'])
        cont_ru = cont_ru.replace("\n\n", "\n")[:600]
        emoji = random.choice(self._emojis_for(topic))
        body = ". ".join(cont_ru.split(". ")[:4])
        if body and not body.endswith("."):
            body += "."
        hashtags = " ".join(self._hashtags_for(topic))
        clean_title = title_ru.strip(' "\'')
        return "<b>{} {}</b>\n\n{}\n\n{}".format(emoji, clean_title, body, hashtags)[:1000]

    def _finalize_post(self, raw: str, topic: str) -> str:
        txt = raw.strip()
        if any(sym in txt for sym in ("**", "__", "`")):
            txt = md_to_html(txt)

        lines = txt.split("\n")

        if lines and "<b>" not in lines[0]:
            first = lines[0].strip(' "\'')
            lines[0] = "<b>{}</b>".format(first)

        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        cleaned_lines = []
        hashtag_line = None
        
        for line in lines:
            line_stripped = line.strip()
            if line_stripped and '#' in line_stripped:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å—Ç—Ä–æ–∫–æ–π —Ö–µ—à—Ç–µ–≥–æ–≤
                words = line_stripped.split()
                hashtag_count = sum(1 for word in words if word.startswith('#'))
                if hashtag_count >= len(words) * 0.5:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã —Å–ª–æ–≤ - —Ö–µ—à—Ç–µ–≥–∏
                    hashtag_line = line_stripped
                else:
                    cleaned_lines.append(line)  # –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏ –≤–Ω—É—Ç—Ä–∏
            else:
                cleaned_lines.append(line)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ö–µ—à—Ç–µ–≥–æ–≤
        final_hashtags = self._hashtags_for(topic)
        if hashtag_line:
            existing_tags = [tag.lstrip('#') for tag in hashtag_line.split() if tag.startswith('#')]
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ö–µ—à—Ç–µ–≥–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
            if len(existing_tags) <= 3:
                final_hashtags = [f"#{tag}" for tag in existing_tags[:3]]
            else:
                final_hashtags = [f"#{tag}" for tag in existing_tags[:3]]

        txt = "\n".join(cleaned_lines)

        if not re.search(r"[üì∞üî•üí°üöÄ‚ö°‚ú®üéØüíªü§ñ]", txt):
            txt = "{} {}".format(random.choice(self._emojis_for(topic)), txt)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not any('#' in line for line in txt.split('\n')):
            txt += "\n\n" + " ".join(final_hashtags)
        else:
            # –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ—à—Ç–µ–≥–∏ –Ω–∞ –Ω–∞—à–∏
            txt += "\n\n" + " ".join(final_hashtags)

        return txt[:1000]

    def _emojis_for(self, topic: str) -> List[str]:
        t = topic.lower()
        if any(w in t for w in ("it", "tech", "—Ç–µ—Ö–Ω–æ–ª–æ–≥", "–ø—Ä–æ–≥—Ä–∞–º–º", "–∫–æ–¥")):
            return self.emojis["tech"]
        if any(w in t for w in ("–±–∏–∑–Ω–µ—Å", "—Ñ–∏–Ω–∞–Ω—Å", "—ç–∫–æ–Ω–æ–º–∏–∫", "–º–∞—Ä–∫–µ—Ç")):
            return self.emojis["business"]
        return self.emojis["news"]

    def _hashtags_for(self, topic: str) -> List[str]:
        base = {
            "it": ["#tech", "#IT", "#—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "#–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏", "#—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"],
            "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç": ["#crypto", "#blockchain", "#–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "#bitcoin", "#defi"],
            "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥": ["#marketing", "#digital", "#—Ä–µ–∫–ª–∞–º–∞", "#smm", "#–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ"],
            "–±–∏–∑–Ω–µ—Å": ["#business", "#—Å—Ç–∞—Ä—Ç–∞–ø", "#–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "#–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "#—ç–∫–æ–Ω–æ–º–∏–∫–∞"],
            "–Ω–æ–≤–æ—Å—Ç–∏": ["#news", "#–Ω–æ–≤–æ—Å—Ç–∏", "#—Å–µ–≥–æ–¥–Ω—è", "#–∞–∫—Ç—É–∞–ª—å–Ω–æ", "#–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"],
        }
        t = topic.lower()
        for k, tags in base.items():
            if k in t:
                return random.sample(tags, 3)
        
        # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 —Ö–µ—à—Ç–µ–≥–∞
        topic_hashtag = topic.replace(" ", "_")[:15]
        return ["#news", "#{}".format(topic_hashtag), "#–∞–∫—Ç—É–∞–ª—å–Ω–æ"]

    @staticmethod
    def _default_prompt() -> str:
        return "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞ –Ω–∞ —Ç–µ–º—É \"{topic}\". –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å.\n\n–ü—Ä–∞–≤–∏–ª–∞:\n1. –ü–µ—Ä–µ–≤–æ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–º—ã—Å–ª.\n2. –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π/–ø—Ä–æ–¥—É–∫—Ç–æ–≤ (Apple –∏ —Ç.–¥.).\n3. –§–æ—Ä–º–∞—Ç: –∂–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ + 2‚Äì3 –∞–±–∑–∞—Ü–∞, ‚â§900 —Å–∏–º–≤–æ–ª–æ–≤. –û–¥–∏–Ω –∏–∑ –∞–±–∑–∞—Ü–µ–≤ (—Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π) –æ—Ñ–æ—Ä–º–∏ –∫–∞–∫ —Ü–∏—Ç–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–≥–∏ <i> –∏ </i>.\n4. –°—Ç–∏–ª—å: –±–µ–∑ –≤–æ–¥—ã.\n5. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –†–û–í–ù–û 3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–∞. –ö–∞–∂–¥—ã–π —Ö–µ—à—Ç–µ–≥ ‚Äî –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ #. –ù–ï –¥–æ–±–∞–≤–ª—è–π —Ö–µ—à—Ç–µ–≥–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç, —Ç–æ–ª—å–∫–æ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π."
