import asyncio
import random
import re
from typing import Dict, List, Optional
from urllib.parse import urlparse

import g4f
from g4f.errors import ModelNotFoundError
from utils.helpers import sanitize_html


def is_http_url(s: str) -> bool:
    try:
        return urlparse(s).scheme in {"http", "https"}
    except Exception:
        return False


def md_to_html(text: str) -> str:
    try:
        import markdown2
    except ImportError:
        return text
    html = markdown2.markdown(text)
    html = html.replace("<strong>", "<b>").replace("</strong>", "</b>").replace("<em>", "<i>").replace("</em>", "</i>")
    html = re.sub(r"</?p>", "", html)
    return html


class AIProcessor:
    _SAFE_MODEL = "gpt-4o-mini"
    _SUPPORTED = {"gpt-4o-mini", "gpt-4"}

    def __init__(self) -> None:
        self.emojis = {
            "tech": ["üíª", "üöÄ", "üîß", "‚ö°", "üåê", "üì±", "ü§ñ"],
            "news": ["üì∞", "üì¢", "üî•", "‚ö†Ô∏è", "üí°", "‚ú®", "üéØ"],
            "business": ["üíº", "üìà", "üí∞", "üè¢", "üìä", "ü§ù", "üí∏"],
        }

    async def process_content(self, entry: Dict, ch_settings: Dict) -> str:
        model = ch_settings.get("ai_model") or self._SAFE_MODEL
        if model not in self._SUPPORTED:
            model = self._SAFE_MODEL
        topic = ch_settings.get("topic", "–Ω–æ–≤–æ—Å—Ç–∏")
        sys_prompt = (ch_settings.get("ai_prompt") or self._default_prompt().format(topic=topic))
        user_prompt = "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–π —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å –≤ –ø–æ—Å—Ç –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º (–¥–æ 900 —Å–∏–º–≤.): Title: {}. Content: {}".format(
            entry['title'], entry['content'][:500])
        try:
            raw = await self._call_llm(model, sys_prompt, user_prompt)
        except ModelNotFoundError:
            raw = await self._call_llm(self._SAFE_MODEL, sys_prompt, user_prompt)
        except Exception as e:
            import logging
            logging.getLogger(__name__).exception("AI error, fallback: %s", e)
            return await self._fallback_format(entry, topic)
        finalized = self._finalize_post(raw, topic)
        finalized = await self._ensure_russian(finalized)
        return sanitize_html(finalized)

    async def simple_translate(self, text: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
        try:
            prompt = (
                "–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä—É—Å—Å–∫–∏–π. –°–æ—Ö—Ä–∞–Ω–∏ —Å–º—ã—Å–ª, –∏–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML. "
                "–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π, –±–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤.\n\n{}"
            ).format(text)
            rsp = await g4f.ChatCompletion.create_async(
                model=self._SAFE_MODEL,
                messages=[{"role": "user", "content": prompt}]
            )
            return rsp
        except Exception:
            return text

    async def _call_llm(self, model: str, sys: str, user: str) -> str:
        return await asyncio.wait_for(g4f.ChatCompletion.create_async(model=model,
                                                                      messages=[{"role": "system", "content": sys},
                                                                                {"role": "user", "content": user}]),
                                      timeout=20)

    async def _fallback_format(self, entry: Dict, topic: str) -> str:
        title_ru = await self.simple_translate(entry['title'])
        cont_ru = await self.simple_translate(entry['content'])
        cont_ru = cont_ru.replace("\n\n", "\n")[:600]
        emoji = random.choice(self._emojis_for(topic))
        body = ". ".join(cont_ru.split(". ")[:4])
        if body and not body.endswith("."):
            body += "."
        clean_title = title_ru.strip(' "\'')
        return "<b>{} {}</b>\n\n{}".format(emoji, clean_title, body)[:1000]

    def _finalize_post(self, raw: str, topic: str) -> str:
        txt = raw.strip()
        if any(sym in txt for sym in ("**", "__", "`")):
            txt = md_to_html(txt)

        lines = txt.split("\n")

        if lines and "<b>" not in lines[0]:
            first = lines[0].strip(' "\'')
            lines[0] = "<b>{}</b>".format(first)

        # –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞: —Å—Ç—Ä–æ–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ö–µ—à—Ç–µ–≥–æ–≤ —É–±–∏—Ä–∞–µ–º,
        # –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É–¥–∞–ª—è–µ–º
        cleaned_lines = []
        for line in lines:
            stripped = line.strip()
            if not stripped:
                cleaned_lines.append(line)
                continue
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å # (–∑–∞–≥–æ–ª–æ–≤–∫–∏/—Ö—ç—à—Ç–µ–≥–∏)
            if stripped.startswith('#'):
                continue
            tokens = stripped.split()
            if tokens and sum(1 for w in tokens if w.startswith('#')) >= max(1, int(len(tokens) * 0.6)):
                continue
            # –£–¥–∞–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: `#word` -> `word`
            no_tags = re.sub(r'(^|\s)#(\w+)', r'\1\2', line)
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã-—Ö—ç—à—Ç–µ–≥–∏ –≤–∏–¥–∞ #anything
            no_tags = re.sub(r'#\S+', '', no_tags)
            # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, –≤–æ–∑–Ω–∏–∫—à–∏–µ –ø–æ—Å–ª–µ –≤—ã—Ä–µ–∑–∞–Ω–∏—è
            no_tags = re.sub(r'\s{2,}', ' ', no_tags).strip()
            cleaned_lines.append(no_tags)

        txt = "\n".join([l for l in cleaned_lines if l])

        if not re.search(r"[üì∞üî•üí°üöÄ‚ö°‚ú®üéØüíªü§ñ]", txt):
            txt = "{} {}".format(random.choice(self._emojis_for(topic)), txt)

        return txt[:1000]

    async def _ensure_russian(self, text: str) -> str:
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥."""
        try:
            def cyr_ratio(s: str) -> float:
                letters = [c for c in s if c.isalpha()]
                if not letters:
                    return 0.0
                cyr = sum(1 for c in letters if '–∞' <= c.lower() <= '—è' or c.lower() == '—ë')
                return cyr / max(1, len(letters))

            ratio = cyr_ratio(text)
            if ratio >= 0.7:
                return text

            # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
            translated = await self.simple_translate(text)
            if cyr_ratio(translated) >= 0.7:
                return translated

            # –í—Ç–æ—Ä–∞—è (–ø–æ—Å–ª–µ–¥–Ω—è—è) –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞, –µ—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            translated2 = await self.simple_translate(translated)
            if cyr_ratio(translated2) >= 0.7:
                return translated2

            return translated2
        except Exception:
            return text

    def _emojis_for(self, topic: str) -> List[str]:
        t = topic.lower()
        if any(w in t for w in ("it", "tech", "—Ç–µ—Ö–Ω–æ–ª–æ–≥", "–ø—Ä–æ–≥—Ä–∞–º–º", "–∫–æ–¥")):
            return self.emojis["tech"]
        if any(w in t for w in ("–±–∏–∑–Ω–µ—Å", "—Ñ–∏–Ω–∞–Ω—Å", "—ç–∫–æ–Ω–æ–º–∏–∫", "–º–∞—Ä–∫–µ—Ç")):
            return self.emojis["business"]
        return self.emojis["news"]

    def _hashtags_for(self, topic: str) -> List[str]:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à—Ç–µ–≥–∏
        return []

    @staticmethod
    def _default_prompt() -> str:
        return (
            "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞ –Ω–∞ —Ç–µ–º—É \"{topic}\". "
            "–ó–∞–¥–∞—á–∞: –ø–µ—Ä–µ–≤–µ–¥–∏ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç—å –ù–ê –†–£–°–°–ö–ò–ô –Ø–ó–´–ö. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –ø–æ-—Ä—É—Å—Å–∫–∏.\n\n"
            "–ü—Ä–∞–≤–∏–ª–∞:\n"
            "1. –ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–π —Å–º—ã—Å–ª.\n"
            "2. –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π/–ø—Ä–æ–¥—É–∫—Ç–æ–≤ (Apple –∏ —Ç.–ø.).\n"
            "3. –§–æ—Ä–º–∞—Ç: –∂–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ + 2‚Äì3 –∞–±–∑–∞—Ü–∞, ‚â§900 —Å–∏–º–≤–æ–ª–æ–≤. "
            "–û–¥–∏–Ω –∏–∑ –∞–±–∑–∞—Ü–µ–≤ (—Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π) –æ—Ñ–æ—Ä–º–∏ –∫–∞–∫ —Ü–∏—Ç–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–≥–∏ <i> –∏ </i>.\n"
            "4. –°—Ç–∏–ª—å: –±–µ–∑ –≤–æ–¥—ã.\n"
            "5. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ö–µ—à—Ç–µ–≥–∏ –≤–æ–æ–±—â–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –∏—Ö –Ω–∏ –≤ –∫–æ–Ω—Ü–µ, –Ω–∏ –≤ —Ç–µ–∫—Å—Ç–µ."
        )
